{"version":3,"sources":["Components/utils/BurgerMenu.js","Components/utils/Input.js","Components/Home/Home.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["BurgerMenu","event","preventDefault","pageWrapId","styles","bmBurgerButton","position","width","height","left","top","bmBurgerBars","background","bmBurgerBarsHover","bmCrossButton","bmCross","bmMenuWrap","bmMenu","padding","fontSize","bmMorphShape","fill","bmItemList","color","bmItem","display","bmOverlay","className","id","href","Component","Input","style","this","props","placeholder","Home","handleClick","console","log","changeValueSelect","e","state","valueInput","date","Date","borderRadius","textAlign","marginTop","backgoundColor","toLocaleTimeString","Onclick","name","onChange","value","onClick","Register","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAkFeA,G,2LA7ECC,GACZA,EAAMC,mB,+BAsDN,OACE,kBAAC,QAAD,CAAMC,WAAa,YAAcC,OAjDtB,CACXC,eAAgB,CACdC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,KAAM,OACNC,IAAK,QAEPC,aAAc,CACZC,WAAY,WAEdC,kBAAmB,CACjBD,WAAY,WAEdE,cAAe,CACbN,OAAQ,OACRD,MAAO,QAETQ,QAAS,CACPH,WAAY,WAEdI,WAAY,CACVV,SAAU,QACVE,OAAQ,QAEVS,OAAQ,CACNL,WAAY,UACZM,QAAS,gBACTC,SAAU,UAEZC,aAAc,CACZC,KAAM,WAERC,WAAY,CACVC,MAAO,UACPL,QAAS,SAEXM,OAAQ,CACNC,QAAS,gBAEXC,UAAW,CACTd,WAAY,wBASZ,yBAAKe,UAAU,YACb,yBAAMA,UAAU,aACZ,uBAAGC,GAAG,OAAQC,KAAK,KAAnB,WAGJ,yBAAKF,UAAU,aAEX,uBAAGC,GAAG,QAASC,KAAK,SAApB,eAEJ,yBAAKF,UAAU,aAEX,uBAAGC,GAAG,UAAWC,KAAK,KAAtB,kB,GArEWC,cCQTC,G,uLARV,OACI,2BACAC,MAAOC,KAAKC,MAAMF,MAClBG,YAAaF,KAAKC,MAAMC,kB,GALdL,cCmFLM,E,YA7EX,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KAORG,YAAc,WAEZC,QAAQC,IAAI,WAAZ,iBAVe,EA6BnBC,kBAAoB,SAAAC,GAKdH,QAAQC,IAAIE,IAhCd,EAAKC,MAAQ,CACXC,WAAY,GACZC,KAAK,IAAIC,MAJI,E,sEAqCT,IAAD,OACJb,EAAQ,CACRzB,MAAM,QACNC,OAAO,MACPsC,aAAa,OACbC,UAAU,SACVC,UAAU,QAIb,OACI,6BAASrB,UAAU,gBACf,kBAAC,EAAD,CAAYvB,OAAQ,CAAC6C,eAAe,SAEpC,6BACI,yBAAKtB,UAAU,aACf,gDAAsBM,KAAKS,MAAME,KAAKM,qBAAtC,KACI,kBAAC,EAAD,CACEf,YAAY,sBACZH,MAAOA,EACPmB,QAASlB,KAAKO,oBAEd,4BAAQY,KAAK,SAASpB,MAAOC,KAAKC,MAAMF,MAAOqB,SAAUpB,KAAKC,MAAMiB,SAC7E,4BAAQG,MAAM,WAAQtB,MAAOA,EAAOuB,QAAStB,KAAKI,aAAlD,sBACA,4BAAQiB,MAAM,OAAQtB,MAAOA,EAAOuB,QAAS,SAACd,GAAD,OAAO,EAAKJ,YAAYI,KAArE,kBACA,4BAAQa,MAAM,WAAYtB,MAAOA,EAAOuB,QAAStB,KAAKI,aAAtD,wB,GA/DIP,aC4BH0B,G,uLA3BR,IAAIxB,EAAQ,CACRzB,MAAM,QACNC,OAAO,MACPsC,aAAa,OACbC,UAAU,SACVC,UAAU,QAEd,OACI,6BAASrB,UAAU,oBACf,kBAAC,EAAD,CACIQ,YAAY,sBACZH,MAAOA,IAGX,kBAAC,EAAD,CACIG,YAAY,0BACZH,MAAOA,IAGX,0DACA,sCAAmB,sCACnB,yD,GAxBOF,cCeR2B,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,eAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAQK,KAAK,QAAQC,UAAW1B,MCDlB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ee32d42.chunk.js","sourcesContent":["import { slide as Menu } from 'react-burger-menu'\nimport React, { Component } from 'react';\nimport './utils.css'\n\nclass BurgerMenu extends Component {\n  showSettings (event) {\n    event.preventDefault();\n    \n  }\n\n  render () {\n    // NOTE: You also need to provide styles, see https://github.com/negomi/react-burger-menu#styling\n    var styles = {\n      bmBurgerButton: {\n        position: 'fixed',\n        width: '36px',\n        height: '30px',\n        left: '36px',\n        top: '36px'\n      },\n      bmBurgerBars: {\n        background: '#373a47'\n      },\n      bmBurgerBarsHover: {\n        background: '#a90000'\n      },\n      bmCrossButton: {\n        height: '24px',\n        width: '24px'\n      },\n      bmCross: {\n        background: '#bdc3c7'\n      },\n      bmMenuWrap: {\n        position: 'fixed',\n        height: '100%'\n      },\n      bmMenu: {\n        background: '#373a47',\n        padding: '2.5em 1.5em 0',\n        fontSize: '1.15em'\n      },\n      bmMorphShape: {\n        fill: '#373a47'\n      },\n      bmItemList: {\n        color: '#b8b7ad',\n        padding: '0.8em'\n      },\n      bmItem: {\n        display: 'inline-block'\n      },\n      bmOverlay: {\n        background: 'rgba(0, 0, 0, 0.3)'\n      }\n     \n\n      \n      \n    }\n    return (\n      <Menu pageWrapId={ \"page-wrap\" } styles={ styles } >\n        <div className=\"box-menu\">\n          <div  className=\"menu-item\">\n              <a id=\"home\"  href=\"/\">Inicio</a>\n\n          </div>\n          <div className=\"menu-item\">\n\n              <a id=\"about\"  href=\"/home\">Gestión</a>\n          </div>\n          <div className=\"menu-item\">\n\n              <a id=\"contact\"  href=\"/\">Visitas</a>\n          </div>\n        </div>\n        \n      </Menu>\n    );\n  }\n}\n\nexport default BurgerMenu;","import React, { Component } from 'react';\n\nclass Input extends Component {\n    render() {  \n      return (\n          <input \n          style={this.props.style}\n          placeholder={this.props.placeholder}\n          />\n      )}}\n\n\n export default Input;","import React, { Component } from 'react';\n// import QR from '../utils/QR'\nimport BurgerMenu from '../utils/BurgerMenu';\nimport './Home.css';\nimport Input from '../utils/Input';\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          valueInput: '',\n          date:new Date(),\n          \n        };\n      }\n      handleClick = ()=> {\n    \n        console.log('this is:', this);\n      }\n    //   componentDidMount() {\n    //     this.timerID = setInterval(\n    //       () => this.tick(),\n    //       1000\n    //     );\n    //   }\n    \n    //   componentWillUnmount() {\n    //     clearInterval(this.timerID);\n    //   }\n    \n    //   tick() {\n    //     this.setState({\n    //       date: new Date()\n    //     });\n    //   }\n    \n    changeValueSelect = e => {\n        \n        //   this.setState({\n        //     valueInput: e.target.value\n        //   });\n          console.log(e)\n        \n      };\n    render() {\n     var style = {\n         width:'15rem', \n         height:'4vh', \n         borderRadius:'10px', \n         textAlign:'center',\n         marginTop:'2rem'\n        }\n          \n          \n      return (\n          <section className=\"home-section\">\n              <BurgerMenu styles={{backgoundColor:'red'}}\n              />\n              <div>\n                  <div className=\"box-input\">\n                  <h2>Hora de entrada: {this.state.date.toLocaleTimeString()}.</h2>\n                      <Input \n                        placeholder=\"Introduce tu nombre\"\n                        style={style}\n                        Onclick={this.changeValueSelect}\n                        />\n                        <select name=\"select\" style={this.props.style} onChange={this.props.Onclick}>\n               <option value=\"razón\" style={style} onClick={this.handleClick}>Razón de visita</option> \n               <option value=\"cita\"  style={style} onClick={(e) => this.handleClick(e)}>Tengo una cita</option>\n               <option value=\"vendedor\"  style={style} onClick={this.handleClick}>Soy vendedor</option>\n\n        </select>\n                                \n                       \n                        \n\n                  </div>\n              \n              </div>\n              \n\n          </section>\n\n      )}}\nexport default Home;","import React, { Component } from 'react';\nimport './Register.css';\n\nimport Input from '../utils/Input'\n\nclass Register extends Component {\n\n    render() {\n        var style = {\n            width:'15rem', \n            height:'4vh', \n            borderRadius:'10px', \n            textAlign:'center',\n            marginTop:'2rem'\n           }\n        return (\n            <section className=\"section-register\">\n                <Input\n                    placeholder=\"Introduce tu nombre\"\n                    style={style}\n                    \n                />\n                <Input\n                    placeholder=\"¿a quién visitas?\"\n                    style={style}\n                    \n                />\n                <label>¿eres discapacitado?</label>\n                <button>Si</button><button>No</button>\n                <button>Enviar respuesta</button>\n        \n            </section>\n        )}}\n        \n\n export default Register;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './Components/Home/Home';\nimport Register from './Components/Register/Register'\n\n\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Route exact path='/' component={Register} />\n      <Route  path='/home' component={Home} />\n\n    \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}